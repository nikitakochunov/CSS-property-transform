* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html,
body {
  height: 100%;
}

body {
  background-color: bisque;
  position: relative;
}

$block-color: rgb(71, 175, 194);

.container {
  padding: 40px;
  display: flex;
  flex-wrap: wrap;
}

.property {
  margin-bottom: 30px;
  margin-right: 90px;
  h1 {
    color: black;
    margin-bottom: 10px;
    font-size: 24px;
  }

  &__background {
    width: 250px;
    height: 250px;
    background: rgba(#000, 0.1);
  }

  &__block {
    width: 100%;
    height: 100%;
    background: $block-color;
    transition: transform 1s;
    // transition: all 0.5s;
  }
}

.translate {
  transform: translate(50px);
}

.scale {
  transform: scale(0.5, 0.5);
}

.rotate {
  animation-name: rotate;
  animation-duration: 5s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.skew {
  transform: skew(-15deg, -15deg);
}

.many-transforms {
  transform: translate(50px, 50px) scale(0.5) rotate(45deg);
}

.transform-origin {
  transform: rotate(45deg);
  transform-origin: top left;
}

.perspective {
  transform: perspective(400px) rotateY(50deg);
}

.perspective-origin {
  transform: rotateY(50deg);
  &-for-bg {
    perspective: 400px;
    perspective-origin: 0 0;
  }
}

.property--translate3D,
.property--scale3D,
.property--rotate3D,
.property--many-transforms-3D,
.property--trf-style-flat,
.property--trf-style-preserve-3d,
.property--backface-visibility {
  .property__background {
    perspective: 500px;
    perspective-origin: center;
  }
}

.translate3D {
  transform: translate3d(50px, 50px, 100px);
}

.scale3D {
  transform: scale3d(2, 2, 1); // по оси z scale не действует
}

.rotate3D {
  animation-name: rotate3D;
  animation-duration: 5s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@keyframes rotate3D {
  0% {
    transform: rotate3d(1, 1, 1, 0deg);
  }
  100% {
    transform: rotate3d(1, 1, 1, 360deg);
  }
}

.many-transforms3D {
  animation-name: many-transforms3D;
  animation-duration: 15s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@keyframes many-transforms3D {
  0% {
    transform: scale3D(1, 1, 1) rotate3D(1, 1, 1, 0deg);
  }
  50% {
    transform: scale3D(0.5, 0.5, 1) rotate3D(1, 1, 1, 360deg);
  }
  0% {
    transform: scale3D(1, 1, 1) rotate3D(1, 1, 1, 0deg);
  }
}

.property--trf-style-preserve-3d,
.property--backface-visibility {
  .property__background {
    transform-style: preserve-3d;
  }
}

.trf-style-flat,
.trf-style-preserve-3d {
  transform: rotateX(60deg);
}

.property--backface-visibility {
  .property__background {
    background: none;
  }
  .property__block {
    transition: 1.5s ease;
    position: relative;
    transform-style: preserve-3d; // это свойство должно быть именно у родителям двух сторон
  }
}

.front,
.back {
  font-size: 32px;
  font-weight: bold;
  position: absolute;
  width: 100%;
  height: 100%;
}

.front {
  // z-index: 2;
  background: $block-color;
  transform: rotateY(0deg);
  backface-visibility: hidden;
}

.back {
  background-color: red;
  transform: rotateY(180deg);
}

.backface-visibility {
  transform: rotateY(180deg);
}

button {
  border: none;
}

.buttons {
  position: fixed;
  display: flex;
  flex-direction: column;
  top: 1%;
  right: 0;
  transform: translate(-10%, 0);

  .btn {
    width: 150px;
    height: 30px;
    margin-bottom: 10px;
    background: rgb(196, 94, 94);
    color: white;
    border: 2px solid darken(rgb(196, 94, 94), 10%);
    &:hover {
      background: lighten(rgb(196, 94, 94), 10%);
    }
  }
}
